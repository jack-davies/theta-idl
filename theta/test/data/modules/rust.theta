language-version: 1.0.0
avro-version: 1.0.0
---

// A module with a few Rust-specific edge-cases

type Foo = {
  input: Int,
  nested: [A]
}

alias A = [Long]


// A recursive type, which means the recursive field needs to be boxed
// in Rust:
type RecursiveRecord = { recurse: RecursiveRecord? }

// Same thing but with a variant rather than a struct:
type RecursiveVariant = A { recurse: RecursiveVariant? }
                      | B { recurse: RecursiveVariant? }

// Recursive variant *without* an optional type
type RecursiveList = RCons { x : Int, rest : RecursiveList }
                   | RNil

// Including RecursiveList in another type caused an infinite loop at
// one point :/
type Record = { a : Int, b : RecursiveList }

type RecursiveNewtype = RecursiveList
